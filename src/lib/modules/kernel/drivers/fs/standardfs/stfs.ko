local component = component or require("component")
local computer = computer or require("computer")

local CALL_BUDGET = 5
local TIME_WINDOW = 1
local callCount = 0
local lastReset = computer.uptime()

local function checkBudget()
    if computer.uptime() - lastReset >= TIME_WINDOW then
        callCount = 0
        lastReset = computer.uptime()
    end
    if callCount < CALL_BUDGET then
        callCount = callCount + 1
        return true
    end
    return false
end

local function findDrives()
    local drives = {}
    local addresses = {}

    for _ = 1, 3 do
        addresses = {}
        for address in component.list("filesystem") do
            table.insert(addresses, address)
        end
        if #addresses > 0 then break end
        Kernel.io.status("warn", "No filesystem components detected, retrying...")
        Kernel.sleep(1)
    end

    if #addresses == 0 then
        Kernel.io.status("err", "No filesystem components found after multiple attempts")
        return drives
    end

    for _, address in ipairs(addresses) do
        while not checkBudget() do
            Kernel.io.status("info", "Call budget exceeded, waiting...")
            Kernel.sleep(0.5)
        end

        local fs = component.proxy(address)
        if fs then
            table.insert(drives, {addr = address, fs = fs})
            Kernel.io.status("info", "Drive found: " .. address)
        else
            Kernel.io.status("warn", "Failed to proxy drive " .. address)
        end
    end

    if #drives == 0 then
        Kernel.io.status("warn", "No valid drives detected!")
    end

    return drives
end

local function findPrimaryDrive(drives)
    if #drives == 0 then
        Kernel.io.status("err", "No drives available to determine primary drive.")
        return
    end

    local bestDrive = nil
    local maxSpace = 0

    for _, drive in ipairs(drives) do
        if drive.fs.exists and drive.fs.exists("/boot") then
            Kernel.io.status("ok", "Primary drive identified by /boot: " .. drive.addr)
            return drive
        end

        if drive.fs.spaceTotal and drive.fs.spaceUsed then
            local freeSpace = drive.fs.spaceTotal() - drive.fs.spaceUsed()
            if freeSpace > maxSpace then
                maxSpace = freeSpace
                bestDrive = drive
            end
        end
    end

    if bestDrive then
        Kernel.io.status("warn", "Primary drive selected by space (not reccomended): [%s]" .. bestDrive.addr)
        return bestDrive
    else
        Kernel.io.status("err", "No valid primary drive found.")
    end
end

local allDrives = findDrives()

_G.stfs = {}
_G.stfs.primary = findPrimaryDrive(allDrives)

function stfs.getDrives()
    return allDrives
end

function stfs.checkDrives()
    allDrives = findDrives()
    return allDrives
end

function stfs.getDrive(drive)
    return drive and drive.fs or stfs.primary.fs
end

function stfs.spaceUsed(drive)
    local fs = stfs.getDrive(drive)
    if fs and fs.spaceUsed then
        return fs.spaceUsed()
    else
        Kernel.io.status("err", "Invalid drive or spaceUsed function missing")
    end
end

function stfs.spaceTotal(drive)
    local fs = stfs.getDrive(drive)
    if fs and fs.spaceTotal then
        return fs.spaceTotal()
    else
        Kernel.io.status("err", "Invalid drive or spaceTotal function missing")
    end
end

function stfs.open(drive, path, mode)
    local fs = stfs.getDrive(drive)
    if not fs or not fs.open then
        Kernel.io.status("err", "Invalid drive or open function missing")
    end

    path = stfs.resolve(path)
    local handle = fs.open(path, mode)
    if not handle then
        Kernel.io.status("err", string.format("Failed to open file: %s", path))
    end

    return {
        drive = drive,
        handle = handle,

        write = function(self, data)
            if not self.handle or not fs.write then
                Kernel.io.status("err", "Invalid file handle or write function missing")
            end
            return fs.write(self.handle, data)
        end,

        read = function(self, count)
            if not self.handle or not fs.read then
                Kernel.io.status("err", "Invalid file handle or read function missing")
            end
            return fs.read(self.handle, count)
        end,

        seek = function(self, whence, offset)
            if not self.handle or not fs.seek then
                Kernel.io.status("err", "Invalid file handle or seek function missing")
            end
            return fs.seek(self.handle, whence, offset)
        end,

        close = function(self)
            if not self.handle or not fs.close then
                Kernel.io.status("err", "Invalid file handle or close function missing")
            end
            fs.close(self.handle)
            self.handle = nil
        end,

        readAll = function(self)
            if not self.handle or not fs.read then
                Kernel.io.status("err", "Invalid file handle or read function missing")
            end
            local dataT = {}
            while true do
                local chunk = fs.read(self.handle, 1024)
                if not chunk then break end
                table.insert(dataT, chunk)
            end
            return table.concat(dataT)
        end,
    }
end

function stfs.touch(drive, path)
    path = stfs.resolve(path)
    local handle = stfs.open(drive, path, "w")
    handle:close()
    return true
end

function stfs.mkDir(drive, path)
    local fs = stfs.getDrive(drive)
    if fs and fs.makeDirectory then
        path = stfs.resolve(path)
        return fs.makeDirectory(path)
    else
        Kernel.io.status("err", "Invalid drive or makeDirectory function missing")
    end
end

function stfs.exists(drive, path)
    local fs = stfs.getDrive(drive)
    if fs and fs.exists then
        path = stfs.resolve(path)
        return fs.exists(path)
    else
        Kernel.io.status("err", "Invalid drive or exists function missing")
    end
end

function stfs.isReadOnly(drive)
    local fs = stfs.getDrive(drive)
    if fs and fs.isReadOnly then
        return fs.isReadOnly()
    else
        Kernel.io.status("err", "Invalid drive or isReadOnly function missing")
    end
end

function stfs.write(drive, path, data)
    path = stfs.resolve(path)
    local file = stfs.open(drive, path, "w")
    file:write(data)
    file:close()
end

function stfs.append(drive, path, data)
    path = stfs.resolve(path)
    local file = stfs.open(drive, path, "a")
    file:write(data)
    file:close()
end

function stfs.list(drive, path)
    local fs = stfs.getDrive(drive)
    if fs and fs.list then
        path = stfs.resolve(path)
        return fs.list(path)
    else
        Kernel.io.status("err", "Invalid drive or list function missing")
    end
end

function stfs.lastModified(drive, path)
    local fs = stfs.getDrive(drive)
    if fs and fs.lastModified then
        path = stfs.resolve(path)
        return fs.lastModified(path)
    else
        Kernel.io.status("err", "Invalid drive or lastModified function missing")
    end
end

function stfs.getLabel(drive)
    local fs = stfs.getDrive(drive)
    if fs and fs.getLabel then
        return fs.getLabel()
    else
        Kernel.io.status("err", "Invalid drive or getLabel function missing")
    end
end

function stfs.setLabel(drive, label)
    local fs = stfs.getDrive(drive)
    if fs and fs.setLabel then
        return fs.setLabel(label)
    else
        Kernel.io.status("err", "Invalid drive or setLabel function missing")
    end
end

function stfs.remove(drive, path)
    local fs = stfs.getDrive(drive)
    if fs and fs.remove then
        path = stfs.resolve(path)
        return fs.remove(path)
    else
        Kernel.io.status("err", "Invalid drive or remove function missing")
    end
end

function stfs.size(drive, path)
    local fs = stfs.getDrive(drive)
    if fs and fs.size then
        path = stfs.resolve(path)
        return fs.size(path)
    else
        Kernel.io.status("err", "Invalid drive or size function missing")
    end
end

function stfs.read(drive, path, count)
    path = stfs.resolve(path)
    local file = stfs.open(drive, path, "r")
    local data = file:read(count)
    file:close()
    return data
end

function stfs.rename(drive, oldPath, newPath)
    local fs = stfs.getDrive(drive)
    if fs and fs.rename then
        oldPath = stfs.resolve(oldPath)
        newPath = stfs.resolve(newPath)
        return fs.rename(oldPath, newPath)
    else
        Kernel.io.status("err", "Invalid drive or rename function missing")
    end
end

function stfs.isDirectory(drive, path)
    local fs = stfs.getDrive(drive)
    if fs and fs.isDirectory then
        path = stfs.resolve(path)
        return fs.isDirectory(path)
    else
        Kernel.io.status("err", "Invalid drive or isDirectory function missing")
    end
end

function stfs.getTokens(path)
    path = stfs.resolve(path)
    local tokens = {}
    for token in string.gmatch(path, "([^/]+)") do
        table.insert(tokens, token)
    end
    return tokens
end

function stfs.getTokensRaw(path)
    local tokens = {}
    for token in string.gmatch(path, "([^/]+)") do
        table.insert(tokens, token)
    end
    return tokens
end

function stfs.resolve(path)
    local pathTokens = {}
    for token in string.gmatch(path, "[^/]+") do
        table.insert(pathTokens, token)
    end

    local resolvedTokens = {}
    for _, token in ipairs(pathTokens) do
        if token == ".." then
            if #resolvedTokens > 0 then
                table.remove(resolvedTokens)
            end
        elseif token ~= "." then
            table.insert(resolvedTokens, token)
        end
    end

    local resolvedPath = table.concat(resolvedTokens, "/")

    if path:sub(1, 1) == "/" then
        resolvedPath = "/" .. resolvedPath
    end
    return resolvedPath
end

function stfs.combine(path1, path2)
    path1 = stfs.resolve(path1)
    path2 = stfs.resolve(path2)
    if path1 == "" then return path2 end
    if path2 == "" then return path1 end
    return path1 .. "/" .. path2
end
